const cron = require('node-cron');
const path = require('path');
const fs = require('fs');
const FormData = require('form-data');
const { Post } = require('../../models');
const axios = require('axios');
const evaluateImageContent = require('../../helpers/checkingImgaePoint');
require('dotenv').config();

// Ch·∫°y cron m·ªói 1 ph√∫t (ƒë·ªïi t·ª´ */5 th√†nh */1 theo code c·ªßa b·∫°n)
cron.schedule('*/1 * * * *', async () => {
  try {
    console.log('üîç Checking posts with status WAITING...');

    // L·∫•y t·∫•t c·∫£ b√†i ƒëƒÉng c√≥ tr·∫°ng th√°i 'WAITING'
    const posts = await Post.find({ status: 'WAITING' });

    if (!posts.length) {
      console.log('‚úÖ No posts to check.');
      return;
    }

    for (const post of posts) {
      let aiCheckFailed = false;
      let allApproved = true;
      const updatedImages = [];

      console.log(`üìå Checking post ID: ${post._id}`);

      const checkResults = await Promise.allSettled(
        post.images.map(async (image) => {
          const reasonReject = []; // M·∫£ng l√Ω do t·ª´ ch·ªëi cho t·ª´ng ·∫£nh
          try {
            // const imagePath = path.join(__dirname, '../../', image.url);

            // // Ki·ªÉm tra xem file ·∫£nh c√≥ t·ªìn t·∫°i kh√¥ng tr∆∞·ªõc khi g·ª≠i API
            // if (!fs.existsSync(imagePath)) {
            //   throw new Error(`Image file ${image.url} not found`);
            // }

            // G·ªçi API SightEngine ƒë·ªÉ ph√¢n t√≠ch ·∫£nh
            const result = await checkImage(image.url);
            if (!result || result.status !== 'success') {
              throw new Error(`Invalid API response for ${image.url}`);
            }

            // ƒê√°nh gi√° k·∫øt qu·∫£ ph√¢n t√≠ch
            const evaluation = evaluateImageContent(result, {});
            if (!evaluation || typeof evaluation.approved === 'undefined') {
              throw new Error(`Evaluation failed for ${image.url}`);
            }

            // N·∫øu ·∫£nh kh√¥ng ƒë∆∞·ª£c duy·ªát, th√™m l√Ω do t·ª´ ch·ªëi
            if (!evaluation.approved) {
              reasonReject.push(...evaluation.reasons);
              allApproved = false;
              console.log(
                `üö´ Image ${image.url} rejected: ${evaluation.reasons.join(', ')}`
              );
            }
          } catch (error) {
            // console.error(
            //   `‚ùå Error checking image ${image.url}:`,
            //   error.message
            // );
            reasonReject.push(error.message);
            aiCheckFailed = true;
            allApproved = false;
          }

          // Tr·∫£ v·ªÅ th√¥ng tin ·∫£nh ƒë√£ ki·ªÉm tra
          return {
            url: image.url,
            index: image.index,
            reasonReject: reasonReject.length > 0 ? reasonReject : [],
          };
        })
      );

      // X·ª≠ l√Ω k·∫øt qu·∫£ t·ª´ Promise.allSettled v√† c·∫≠p nh·∫≠t m·∫£ng images
      checkResults.forEach((result) => {
        if (result.status === 'fulfilled') {
          updatedImages.push(result.value);
        } else {
         // console.error(`‚ùå Image check failed unexpectedly:`, result.reason);
          // Th√™m ·∫£nh l·ªói v√†o updatedImages v·ªõi l√Ω do t·ª´ ch·ªëi
          updatedImages.push({
            url: result.reason.image?.url || 'unknown',
            index: result.reason.image?.index || 0,
            reasonReject: [result.reason.message || 'Unknown error'],
          });
          aiCheckFailed = true;
          allApproved = false;
        }
      });

      // X√°c ƒë·ªãnh tr·∫°ng th√°i m·ªõi cho b√†i ƒëƒÉng
      let newStatus = allApproved ? 'SELLING' : 'REJECTED';
      if (aiCheckFailed) {
        newStatus = 'WAITING|AI_CHECKING_FAILED';
      }
      await Post.findByIdAndUpdate(
        post._id,
        { status: newStatus, images: updatedImages },
        { new: true }
      );

      console.log(`üì¢ Post ID: ${post._id} updated to ${newStatus}`);
    }
  } catch (error) {
    console.error('‚ùå Error checking posts:', error);
  }
});

/**
 * G·ª≠i ·∫£nh l√™n API SightEngine ƒë·ªÉ ki·ªÉm tra n·ªôi dung
 * @param {string} imagePath - ƒê∆∞·ªùng d·∫´n t·ªõi file ·∫£nh
 * @returns {Promise<Object>} - K·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ API
 */
const checkImage = async (imagePath) => {
  const data = new FormData();
  data.append('media', fs.createReadStream(imagePath));
  data.append('workflow', 'wfl_i82TKxJD9c9oVBe9cQW2k');
  data.append('api_user', '1222006132');
  data.append('api_secret', 'RX7Rro7YXqvzRhPnvwNsVWfUEQyin8Xt');

  try {
    const response = await axios.get(
      'https://api.sightengine.com/1.0/check-workflow.json',
      {
        params: {
          url: imagePath,
          workflow: 'wfl_i82TKxJD9c9oVBe9cQW2k',
          api_user: '1222006132',
          api_secret: 'RX7Rro7YXqvzRhPnvwNsVWfUEQyin8Xt',
        },
      }
    );

    return response.data;
  } catch (error) {
    // if (error.response) {
    //   console.error('üö® API Error:', error.response.data);
    // } else {
    //   console.error('‚ùå Network/Error:', error.message);
    // }
    throw error;
  }
};

module.exports = cron;
